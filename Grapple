local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer

-- Persistent variables for GUI states and positions
local isFiring1 = true -- "On" state is active initially
local lastGuiPosition1 = UDim2.new(0, 10, 0, 10)
local renderConnection

-- Function to get the main rope
local function getMainRope()
    local ropesFolder = workspace:FindFirstChild("Ropes")
    local userRopeFolder = ropesFolder and ropesFolder:FindFirstChild("7unlv3d")
    return userRopeFolder and userRopeFolder:FindFirstChild("mainConnectionRope")
end

-- Function to set rope length gradually
local function graduallySetRopeLength(targetLength, duration)
    local mainRope = getMainRope()
    if not mainRope then return end

    local currentLength = mainRope.Length or 0
    local increment = (targetLength - currentLength) / (duration * 120) -- Assuming 120 FPS
    local elapsed = 0

    if renderConnection then
        renderConnection:Disconnect()
    end

    renderConnection = RunService.Heartbeat:Connect(function(deltaTime)
        elapsed += deltaTime
        currentLength = currentLength + increment
        mainRope.Length = currentLength

        -- Stop when target length is reached or duration elapsed
        if elapsed >= duration or 
           (increment > 0 and currentLength >= targetLength) or 
           (increment < 0 and currentLength <= targetLength) then
            mainRope.Length = targetLength
            renderConnection:Disconnect()
            renderConnection = nil
        end
    end)
end

-- Function to create the GUI
local function createGui1()
    local gui = Instance.new("ScreenGui")
    gui.Name = "MyGUI1"
    gui.ResetOnSpawn = false
    gui.Parent = player:WaitForChild("PlayerGui")

    local window = Instance.new("Frame")
    window.Name = "MainWindow1"
    window.Size = UDim2.new(0, 200, 0, 100)
    window.Position = lastGuiPosition1
    window.BackgroundColor3 = Color3.new(0, 0, 0) -- Black background
    window.BackgroundTransparency = 0.5
    window.Active = true
    window.Draggable = true
    window.Parent = gui

    local toggleButton1 = Instance.new("TextButton")
    toggleButton1.Name = "ToggleButton1"
    toggleButton1.Size = UDim2.new(0, 150, 0, 75)
    toggleButton1.Position = UDim2.new(0.5, -75, 0.5, -37)
    toggleButton1.BackgroundColor3 = Color3.new(0, 0, 0)
    toggleButton1.Text = isFiring1 and "On" or "Off"
    toggleButton1.TextColor3 = Color3.new(1, 1, 1)
    toggleButton1.Parent = window

    -- Actions for "On" and "Off"
    local function setToOn()
        isFiring1 = true
        toggleButton1.Text = "On"
        graduallySetRopeLength(5, 0.1) -- Gradually decrease to length 4 over 0.6 seconds
    end

    local function setToOff()
        isFiring1 = false
        toggleButton1.Text = "Off"
        graduallySetRopeLength(240000000, 24000) -- Gradually increase to length 40000 over 3 seconds
    end

    -- Toggle button action
    toggleButton1.MouseButton1Click:Connect(function()
        if isFiring1 then
            setToOff()
        else
            setToOn()
        end
    end)

    window:GetPropertyChangedSignal("Position"):Connect(function()
        lastGuiPosition1 = window.Position
    end)
end

-- Ensure GUI is created only once
StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
createGui1()
--
-- Create GUI
local gui = Instance.new("ScreenGui")
gui.Name = "GrappleScriptGUI"
gui.Parent = game:GetService("CoreGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 160, 0, 120)
frame.Position = UDim2.new(0.5, -80, 0.5, -60)
frame.BackgroundTransparency = 0.5
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.Parent = gui

local dragBar = Instance.new("Frame")
dragBar.Size = UDim2.new(1, 0, 0, 35)
dragBar.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
dragBar.Parent = frame

-- Grapple Script Button
local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 140, 0, 30)
button.Position = UDim2.new(0, 10, 0, 10)
button.Text = "Grapple Script: OFF"
button.TextColor3 = Color3.new(1, 1, 1)
button.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
button.Parent = frame

-- Player Name Input TextBox
local playerNameBox = Instance.new("TextBox")
playerNameBox.Size = UDim2.new(0, 140, 0, 30)
playerNameBox.Position = UDim2.new(0, 10, 0, 50)
playerNameBox.PlaceholderText = "Enter player name"
playerNameBox.TextColor3 = Color3.new(1, 1, 1)
playerNameBox.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
playerNameBox.ClearTextOnFocus = true
playerNameBox.Parent = frame

-- Grapple Button for targeting player
local grappleButton = Instance.new("TextButton")
grappleButton.Size = UDim2.new(0, 140, 0, 30)
grappleButton.Position = UDim2.new(0, 10, 0, 90)
grappleButton.Text = "Target Player"
grappleButton.TextColor3 = Color3.new(1, 1, 1)
grappleButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
grappleButton.Parent = frame

-- Variables
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local targetPlayer = nil
local isEnabled = false
local fireRate = 0.11

-- Function to calculate movement prediction with closer aiming
local function getPredictedPosition(torso)
    local velocity = torso.AssemblyLinearVelocity
    local predictionFactor

    if velocity.Y > 6 then -- Player is jumping
        predictionFactor = 0.03 -- Lower prediction when jumping
    elseif velocity.Y < -6 then -- Player is falling
        predictionFactor = 0.05 -- Adjust for falling
    elseif velocity.Magnitude > 5 then -- Player is moving
        predictionFactor = 0.1 -- Standard movement
    else
        predictionFactor = 0.05 -- Stationary target
    end

    return torso.Position + (velocity * predictionFactor * 0.5) -- Aim closer to the target
end

-- Function to check for grapple tool
local function hasGrappleTool()
    local character = LocalPlayer.Character
    if character then
        for _, item in pairs(character:GetChildren()) do
            if item:IsA("Tool") and item:FindFirstChild("RemoteEvent") then
                return item
            end
        end
    end
    return nil
end

-- Function to find a player by their name or display name.
local function findPlayerByName(name)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name:lower():find(name) or player.DisplayName:lower():find(name) then
            return player
        end
    end
    return nil
end

-- Function to fire the grapple.
local function fireGrappleInstantly()
    if not targetPlayer or not targetPlayer.Character then 
        warn("No valid target player!") 
        return 
    end

    local rootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not rootPart then 
        warn("Target player does not have HumanoidRootPart!") 
        return 
    end

    local predictedPosition = getPredictedPosition(rootPart)
    local grappleTool = hasGrappleTool()

    if grappleTool then 
        grappleTool.RemoteEvent:FireServer(predictedPosition)
        print("Grappled to " .. targetPlayer.Name)
    else 
        print("Grapple tool not equipped!") 
    end 
end

-- Grapple loop function.
local function grappleLoop()
    while isEnabled do 
        fireGrappleInstantly() 
        task.wait(fireRate) 
    end 
end 

-- Toggle grapple logic.
local function toggleGrapple()
    if targetPlayer then 
        isEnabled = not isEnabled 

        button.Text = isEnabled and "Grapple Script: ON" or "Grapple Script: OFF"

        if isEnabled then task.spawn(grappleLoop) end 
    else 
        warn("Player not found! Double-check the name entered.") 
    end 
end 

-- Main toggle function.
local function toggleLoop()
    local playerName = playerNameBox.Text:lower()

    if playerName and playerName ~= "" then 
        targetPlayer = findPlayerByName(playerName) 
        toggleGrapple() 
    else 
        warn("Please enter a valid player name!") 
    end 
end 

-- Button click events.
button.MouseButton1Click:Connect(toggleLoop)
grappleButton.MouseButton1Click:Connect(function()
    local playerName = playerNameBox.Text:lower()
    if playerName and playerName ~= "" then
        targetPlayer = findPlayerByName(playerName)
        if targetPlayer then
            fireGrappleInstantly()
        else
            warn("Player not found!")
        end
    else
        warn("Please enter a valid player name!")
    end
end)

-- Draggable functionality for the GUI (Mobile Support)
local dragging, dragInput, dragStart, startPos

dragBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
    end
end)

dragBar.InputChanged:Connect(function(input)
    if dragging then
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                        startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end
end)

dragBar.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)
--

-- Create GUI
local gui = Instance.new("ScreenGui")
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Name = "Grapple UI"
gui.DisplayOrder = 999
gui.Parent = game:GetService("CoreGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 150)
frame.Position = UDim2.new(1, -220, 0, 10)
frame.BackgroundTransparency = 0
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.Parent = gui

local yOffset = 26
local buttonHeight = 15
local buttonSpacing = 5

-- Function to create toggle buttons
local function createToggleButton(text, toggleFunction)
    local button = Instance.new("TextButton")
    button.Text = text .. ": OFF"
    button.Size = UDim2.new(0, 180, 0, buttonHeight)
    button.Position = UDim2.new(0, 10, 0, yOffset)
    button.BackgroundTransparency = 0
    button.BackgroundColor3 = Color3.new(0, 0, 0)
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Parent = frame

    yOffset = yOffset + buttonHeight + buttonSpacing

    local isEnabled = false

    button.MouseButton1Click:Connect(function()
        isEnabled = not isEnabled
        button.Text = text .. ": " .. (isEnabled and "ON" or "OFF")
        toggleFunction(isEnabled)
    end)
end

-- Draggable functionality with minimise button
local dragBar = Instance.new("Frame")
dragBar.Size = UDim2.new(1, -20, 0, 20)
dragBar.Position = UDim2.new(0, 0, 0, 0)
dragBar.BackgroundTransparency = 0.5
dragBar.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
dragBar.Parent = frame

-- Minimise button (always visible)
local minimiseButton = Instance.new("TextButton")
minimiseButton.Size = UDim2.new(0, 20, 1, 0)
minimiseButton.Position = UDim2.new(1, -20, 0, 0)
minimiseButton.BackgroundTransparency = 0
minimiseButton.BackgroundColor3 = Color3.new(0, 0, 0)
minimiseButton.TextColor3 = Color3.new(0, 0, 0)
minimiseButton.Text = "+"
minimiseButton.Parent = gui  -- Parent the + button to the main gui, not inside the frame

local isMinimised = false

minimiseButton.MouseButton1Click:Connect(function()
    isMinimised = not isMinimised
    frame.Visible = not isMinimised  -- Hide the frame, but keep the button visible
    minimiseButton.Text = isMinimised and "+" or "-"  -- Toggle the text
end)

local dragging = false
local dragStart
local startPos

dragBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
    end
end)

dragBar.InputChanged:Connect(function(input)
    if dragging then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

dragBar.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

-- Add toggles
createToggleButton("Kill", function(isEnabled)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    if isEnabled then
        -- Enable kill functionality
        local damagePart = workspace:FindFirstChild("Pit") and workspace.Pit:FindFirstChild("Damage")
        local root = character:WaitForChild("HumanoidRootPart")
        if damagePart then
            damagePart.CFrame = root.CFrame
            damagePart.Size = Vector3.new(9999999, 9999999, 9999999)
        else
            warn("Damage part not found in workspace.Pit!")
        end
    else
        -- Disable kill functionality and ensure no kill-on-touch
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                -- Neutralise any 'Touched' events to prevent harmful touch
                part.Touched:Connect(function() end)
            end
        end

        local damagePart = workspace:FindFirstChild("Pit") and workspace.Pit:FindFirstChild("Damage")
        if damagePart then
            damagePart.Size = Vector3.new(10, 10, 10)
            damagePart.Position = Vector3.new(0, -5000, 0)
        end
    end
end)

createToggleButton("Toggle Touch", function(isEnabled)
    for _, part in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not isEnabled
            part.CanTouch = not isEnabled
        end
    end
end)

local RunService = game:GetService("RunService")
local pushConnection
createToggleButton("Push", function(isEnabled)
    if isEnabled then
        pushConnection = RunService.Heartbeat:Connect(function()
            local player = game.Players.LocalPlayer
            if player.Character and player.Character:FindFirstChild("Push") then
                game:GetService("ReplicatedStorage").Events.Remote.Client.push:FireServer()
            end
        end)
    else
        if pushConnection then
            pushConnection:Disconnect()
            pushConnection = nil
        end
    end
end)

createToggleButton("Boost Teleport", function(isEnabled)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local root = character:WaitForChild("HumanoidRootPart")

    if isEnabled then
        local jumpBoost = workspace:FindFirstChild("Map") and workspace.Map.Cool.Boosts:FindFirstChild("Jump")
        local speedBoost = workspace:FindFirstChild("Map") and workspace.Map.Cool.Boosts:FindFirstChild("Speed")

        if jumpBoost and jumpBoost:FindFirstChild("touchDetector") then
            jumpBoost.touchDetector.CFrame = root.CFrame
            jumpBoost.touchDetector.Size = Vector3.new(9999999, 9999999, 9999999)
        else
            warn("Jump boost not found!")
        end

        if speedBoost and speedBoost:FindFirstChild("touchDetector") then
            speedBoost.touchDetector.CFrame = root.CFrame
            speedBoost.touchDetector.Size = Vector3.new(9999999, 9999999, 9999999)
        else
            warn("Speed boost not found!")
        end
    else
        local jumpBoost = workspace:FindFirstChild("Map") and workspace.Map.Cool.Boosts:FindFirstChild("Jump")
        local speedBoost = workspace:FindFirstChild("Map") and workspace.Map.Cool.Boosts:FindFirstChild("Speed")

        if jumpBoost and jumpBoost:FindFirstChild("touchDetector") then
            jumpBoost.touchDetector.Size = Vector3.new(1, 1, 1)
        end
        if speedBoost and speedBoost:FindFirstChild("touchDetector") then
            speedBoost.touchDetector.Size = Vector3.new(1, 1, 1)
        end
    end
end)

createToggleButton("Remove Ragdoll", function(isEnabled)
    if isEnabled then
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        local ragdollValue = character:FindFirstChild("ragdollValue")
        if ragdollValue then
            ragdollValue:Destroy()
            print("Ragdoll removed successfully.")
        else
            warn("No ragdollValue found in the character.")
        end
    end
end)

createToggleButton("Freeze", function(isEnabled)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    humanoidRootPart.Anchored = isEnabled
    if isEnabled then
        print("Character frozen.")
    else
        print("Character unfrozen.")
    end
end)

-- Initially show the UI
frame.Visible = true

--
local player = game:GetService("Players")["LuaCryp1"]
local grappleTool = player.Backpack:FindFirstChild("Grapple")
local RunService = game:GetService("RunService")

if grappleTool and grappleTool:IsA("Tool") then
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            -- Define the radius of rotation and speed
            local radius = 11
            local speed = 6 -- Radians per second
            local height = 10
            -- Start rotating the tool
            RunService.RenderStepped:Connect(function(deltaTime)
                -- Calculate the angle based on time
                local time = tick()
                local angle = time * speed

                -- Calculate the new position (circular motion)
                local x = math.cos(angle) * radius
                local z = math.sin(angle) * radius

                -- Update the tool's Grip to reflect the rotation
                grappleTool.Grip = CFrame.new(x, 1, z) * CFrame.Angles(0, angle, 0)
            end)
        else
            warn("HumanoidRootPart not found.")
        end
    else
        warn("Character not found.")
    end
else
    warn("Grapple tool not found or is not a Tool.")
end
--
loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Nameless-Admin-23304"))()
